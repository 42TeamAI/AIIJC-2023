import os
import random
import json

import numpy as np
import pandas as pd
import torch
from catboost import CatBoostClassifier


def seed_everything(seed):
    random.seed(seed)
    os.environ['PYTHONHASHSEED'] = str(seed)
    np.random.seed(seed)
    torch.manual_seed(seed)
    torch.cuda.manual_seed_all(seed)
    torch.backends.cudnn.deterministic = True
    torch.backends.cudnn.benchmark = False


def load_npy_for_cb(df, path):
    data = []
    for name in df.record_name:
        with open(f"{path}{name}.npy", "rb") as f:
            y = np.load(f, allow_pickle=True)
            row = np.std(y, axis=1)
            data.append(row)
    data = np.stack(data)
    data = pd.DataFrame(np.stack(data), columns=list(range(data.shape[-1])))
    data["record_name"] = df["record_name"]
    return data


def processing(meta, cat_f, path, is_train=True):
    meta = meta.fillna(0)
    meta.age = meta.age.astype(int)

    for c in cat_f:
        meta[c] = meta[c].astype(str)
    meta.age = meta.age.astype(int)
    meta.ecg_id = meta.ecg_id.astype(int)
    meta.patient_id = meta.patient_id.astype(int)
    meta.scp_codes = meta.scp_codes.astype(str)
    if is_train:
        data = load_npy_for_cb(meta, path)
    else:
        data = load_npy_for_cb(meta, path)
    meta = meta.merge(data, on='record_name')
    if is_train:
        return meta.drop(columns=['myocard', 'record_name', 'recording_date', 'filename_lr', 'filename_hr', 'ecg_id', 'patient_id']), meta[
            'myocard']
    return meta.drop(columns=['myocard', 'record_name', 'recording_date', 'filename_lr', 'filename_hr', 'ecg_id', 'patient_id'])


def predict(path_to_meta, path):
    meta = pd.read_csv(path_to_meta)
    seed_everything(42)
    cat_f = ['age', 'sex', 'height', 'weight', 'nurse', 'site', 'device', 'heart_axis',
             'infarction_stadium1', 'infarction_stadium2', 'validated_by', 'second_opinion',
             'initial_autogenerated_report', 'validated_by_human', 'baseline_drift', 'static_noise',
             'burst_noise', 'electrodes_problems', 'extra_beats', 'pacemaker', 'strat_fold', 'group']

    with open('catboost_all_data.json', 'r') as f:
        best_params = json.load(f)

    model = CatBoostClassifier(eval_metric='F1', **best_params)
    model.load_model('model.cb')
    X = processing(meta, cat_f, path, is_train=False)
    cb_pred = model.predict(X)
    meta['myocard'] = cb_pred
    meta[['myocard', 'record_name']].to_csv('predict.csv', index=None)
    return meta[['myocard', 'record_name']]


if __name__ == '__main__':
    with open('config.json', 'r') as f:
        config = json.load(f)
    res = predict(config['train_meta'], config['train_path'])