import time

import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import minmax_scale
from sklearn.metrics import  f1_score
from catboost import CatBoostClassifier
import numpy as np
import seaborn as sns
import random
import os
import torch

def seed_everything(TORCH_SEED):
    random.seed(TORCH_SEED)
    os.environ['PYTHONHASHSEED'] = str(TORCH_SEED)
    np.random.seed(TORCH_SEED)
    torch.manual_seed(TORCH_SEED)
    torch.cuda.manual_seed_all(TORCH_SEED)
    torch.backends.cudnn.deterministic = True
    torch.backends.cudnn.benchmark = False
seed_everything(42)
gts = pd.read_csv('train/train_gts.csv')
meta = pd.read_csv('train/train_meta.csv')

gts.myocard.hist()
# %%
from sklearn.metrics import auc


def load_npy_for_cb(df, part='train'):
    data = []
    for name in df.record_name:
        with open(f"{part}/{name}.npy", "rb") as f:
            y = np.load(f, allow_pickle=True)
            x = np.arange(5000) / 500

            row = []
            for i in range(12):
                row.append(auc(x, y[i, :]))
            row = np.array(row)
            data.append(row)
    data = np.stack(data)
    data = pd.DataFrame(np.stack(data), columns=list(range(data.shape[-1])))
    data["record_name"] = df["record_name"]
    return data


def processing(gts, meta, is_train=True):
    gts = gts.merge(meta, on='record_name')
    to_drop = ['pacemaker', 'extra_beats', "electrodes_problems", 'burst_noise', 'static_noise', 'baseline_drift',
               'validated_by', 'infarction_stadium2',
               'infarction_stadium1', 'heart_axis', 'height', 'weight', 'nurse']
    gts.drop(columns=to_drop, inplace=True)
    gts.age = gts.age.astype(int)
    gts.ecg_id = gts.ecg_id.astype(int)
    gts.patient_id = gts.patient_id.astype(int)
    gts['scp_codes'] = gts['scp_codes'].astype(str)
    gts['site'] = gts['site'].astype(str)
    if is_train:
        data = load_npy_for_cb(gts, part='train')
    else:
        data = load_npy_for_cb(gts, part='test')
    gts = gts.merge(data, on='record_name')

    if is_train:
        return gts.drop(columns=['myocard', 'record_name', 'recording_date', 'filename_lr', 'filename_hr']), gts[
            'myocard']
    return gts.drop(columns=['myocard', 'record_name', 'recording_date', 'filename_lr', 'filename_hr'])


X, y = processing(gts, meta)
X_train, X_val, y_train, y_val = train_test_split(X, y, test_size=0.25, random_state=42)

cat_f = ['ecg_id', 'patient_id', 'age', 'sex', 'site', 'device',
         'scp_codes', 'second_opinion', 'initial_autogenerated_report',
         'validated_by_human', 'strat_fold', 'group']

model_c = CatBoostClassifier(eval_metric='F1')
model_c.fit(X_train, y_train, eval_set=(X_val, y_val), cat_features=cat_f, text_features=['report'], use_best_model=True)
print(f1_score(y_val, model_c.predict(X_val)))

y_train = model_c.predict(X_train)

model_c = CatBoostClassifier(eval_metric='F1')
model_c.fit(X_train, y_train, eval_set=(X_val, y_val), cat_features=cat_f, text_features=['report'], use_best_model=True)
print(f1_score(y_val, model_c.predict(X_val)))

meta_test = pd.read_csv('test/test_meta.csv')
gts_test = pd.read_csv('test/sample_submission.csv')
X = processing(gts_test, meta_test, is_train=False)
cb_pred = model_c.predict(X)
gts_test['myocard'] = cb_pred
gts_test.to_csv('submits/catboost_on_meta_2_PS.csv', index=None)